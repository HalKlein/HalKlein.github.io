<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程是一门艺术 on HalKlein`s Blog</title>
    <link>https://halklein.github.io/categories/%E7%BC%96%E7%A8%8B%E6%98%AF%E4%B8%80%E9%97%A8%E8%89%BA%E6%9C%AF/</link>
    <description>Recent content in 编程是一门艺术 on HalKlein`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>dev.HalKlein@gmail.com (HalKlein)</managingEditor>
    <webMaster>dev.HalKlein@gmail.com (HalKlein)</webMaster>
    <lastBuildDate>Tue, 24 Dec 2019 21:22:50 +0800</lastBuildDate>
    
	<atom:link href="https://halklein.github.io/categories/%E7%BC%96%E7%A8%8B%E6%98%AF%E4%B8%80%E9%97%A8%E8%89%BA%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于数据库索引的一些问题</title>
      <link>https://halklein.github.io/2019/021/</link>
      <pubDate>Tue, 24 Dec 2019 21:22:50 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/021/</guid>
      <description>密集索引和稀疏索引 一、密集索引和稀疏索引 密集索引文件中的每个搜索码值都对应一个索引值 稀疏索引文件只为索引码的某些值建立索引项 MySQL常见的</description>
    </item>
    
    <item>
      <title>数据库索引之 B&#43; Tree、Hash、BitMap</title>
      <link>https://halklein.github.io/2019/020/</link>
      <pubDate>Tue, 24 Dec 2019 19:54:38 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/020/</guid>
      <description>B+ Tree 由于，二叉查看树在插入修改过程中，很可能出现只有左右子树的情况，虽然可以用平衡调整二叉树，但是每次IO依然很费时间，每访问一层就要对磁盘</description>
    </item>
    
    <item>
      <title>Socket 入门</title>
      <link>https://halklein.github.io/2019/011/</link>
      <pubDate>Tue, 05 Nov 2019 09:31:12 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/011/</guid>
      <description>进程间通信 网络中进程进行通信的前提是每个进程都要有唯一的标识，在本地计算机中我们可以用PID来唯一标识一个进程，可以多个计算机处在网络中时，</description>
    </item>
    
    <item>
      <title>HTTP 与 HTTPS</title>
      <link>https://halklein.github.io/2019/010/</link>
      <pubDate>Sun, 03 Nov 2019 15:52:12 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/010/</guid>
      <description>1. HTTP协议 超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协</description>
    </item>
    
    <item>
      <title>TCP滑动窗口</title>
      <link>https://halklein.github.io/2019/009/</link>
      <pubDate>Sat, 02 Nov 2019 19:45:16 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/009/</guid>
      <description>1. RTT 和 RTO RTT（round trip time） 往返时延 ：发送一个数据包到收到对应的ACK，所花费的时间。 RTO（retransamission tim</description>
    </item>
    
    <item>
      <title>TCP和UDP的区别</title>
      <link>https://halklein.github.io/2019/008/</link>
      <pubDate>Fri, 01 Nov 2019 14:26:16 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/008/</guid>
      <description>1. UDP协议 用户数据报协议（英语：User Datagram Protocol，缩写：UDP；又称用户数据包协议）是一个简单的面向数据报的通信协议，位于OSI</description>
    </item>
    
    <item>
      <title>TCP四次挥手</title>
      <link>https://halklein.github.io/2019/007/</link>
      <pubDate>Thu, 31 Oct 2019 13:56:16 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/007/</guid>
      <description>1. 四次挥手，关闭连接 由于TCP连接是全双工的，即连接双方可以在一条TCP连接上互相传输数据，每个方向都必须单独进行关闭。这个原则是当一方完成</description>
    </item>
    
    <item>
      <title>TCP三次握手</title>
      <link>https://halklein.github.io/2019/006/</link>
      <pubDate>Thu, 31 Oct 2019 09:14:18 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/006/</guid>
      <description>1. TCP(Transmission Control Protocol) 传输控制协议 TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接。 TCP工作在网络 OSI 的七层模型中的第</description>
    </item>
    
    <item>
      <title>OSI模型和TCP/IP模型</title>
      <link>https://halklein.github.io/2019/005/</link>
      <pubDate>Thu, 31 Oct 2019 09:06:36 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/005/</guid>
      <description>1. OSI 开放式系统互联参考模型 开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织</description>
    </item>
    
    <item>
      <title>算法比赛模板（一）</title>
      <link>https://halklein.github.io/2019/012/</link>
      <pubDate>Sat, 23 Mar 2019 21:47:12 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2019/012/</guid>
      <description>工具类 线性筛素数 #include &amp;lt;iostream&amp;gt; using namespace std; #define SIZE 1000 int main() { int check[SIZE] = { 0 }; int prime[SIZE] = { 0 }; int pos = 0; for ( int i = 2; i &amp;lt; SIZE; i++ ) { /* 是素数 */ if ( !check[i] ) prime[pos++] = i; for ( int j = 0; j &amp;lt; pos &amp;amp;&amp;amp; i</description>
    </item>
    
    <item>
      <title>汉明码（海明码）计算与纠错</title>
      <link>https://halklein.github.io/2018/013/</link>
      <pubDate>Wed, 12 Sep 2018 20:36:39 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2018/013/</guid>
      <description>海明码在网络、通信和操作系统中都有着广泛的运用，同时也是软考的必考内容，所以写这篇笔记以备忘 关于海明码 海明码是一种线性纠错码，由理查德 · 卫斯</description>
    </item>
    
    <item>
      <title>一个月过软件设计师考试-–指南</title>
      <link>https://halklein.github.io/2018/016/</link>
      <pubDate>Thu, 02 Aug 2018 10:39:32 +0800</pubDate>
      <author>dev.HalKlein@gmail.com (HalKlein)</author>
      <guid>https://halklein.github.io/2018/016/</guid>
      <description>我是2018年上半年通过的软件设计师考试，准备了近一个月（内容还是有点多），成绩就不贴出来献丑了. 为什么考？ 这个问题我也想过很久，感觉这个证</description>
    </item>
    
  </channel>
</rss>